康拓展开
#include<bits/stdc++.h>

using namespace std;
const int MAX = 13;
int Fac[MAX],N;
//求出阶乘
void init(){
    Fac[0] = 1;
    for(int i=1;i<=N;++i){
        Fac[i] = Fac[i-1]*i;
    }
}
//康托展开
int Cantor(int *x){
    int res = 0;
    for(int i=1;i<=N;++i){
        int Count = 0;
        for(int j=i+1;j<=N;++j){
            if(x[j] < x[i])
                Count++;
        }
        res += Fac[N-i]*Count;
    }
    return res;
}
//逆康托展开
void DeCantor(int pos,int *x){
    set<int> st;
    for(int i=1;i<=N;++i){
        st.insert(i);
    }
    for(int i=1;i<=N;++i){
        int r = pos / Fac[N-i];
        int l = pos % Fac[N-i];
        pos = l;
        set<int>::iterator it;
        int Count = 0;
        for(it = st.begin();it != st.end();++it){
            Count++;
            if(Count == r+1){
                break;
            }
        }
        x[i] = *it;
        st.erase(it);
    }
}
int main(void){
    int x[MAX],pos;
    cin >> N;
    init();
    cin >> pos;
    DeCantor(pos,x);
    cout << "DeCantor:" << endl;
    for(int i=1;i<=N;++i){
        cout << x[i] << " ";
    }
    cout << endl;
    cout << "Cantor:" << endl;
    cout << Cantor(x) << endl;
    return 0;
}

组合数
#include<iostream>
using namespace std;
typedef long long LL;
const LL N=1e5+2;
LL a[N];
void init(LL p)
{
	a[1]=1;
	for(int i=2;i<=p;++i)a[i]=a[i-1]*i%p;
}
void exgcd(LL a,LL b,LL &x,LL &y)
{
	if(!b){
		x=1;
		y=0;
		return;
	}
	exgcd(b,a%b,y,x);
	y-=a/b*x;
}
LL ksm(LL x,LL n,LL mod)
{
	LL ans=1;
	while(n){
		if(n&1)ans=ans*x%mod;
		n>>=1;
		x=x*x%mod;
	}
	return ans;
}
LL C(LL n,LL m,LL p)
{
	if(n==m||m==0)return 1;
	if(n<m)return 0;
	if(m*2>n)m=n-m;						  /*C(n,m)=c(n,n-m)*/
	return a[n]*ksm(a[m]*a[n-m],p-2,p)%p; /*求(a[m]*a[n-m])在(mod p)意义下的乘法逆元*/
										  /*拓展欧几里得与费马小定理均可*/ 
	/*LL x,y;
	exgcd(a[m]*a[n-m],p,x,y);
	return (a[n]*x%p+p)%p;*/ 
}
LL lucas(LL n,LL m,LL p)
{
	if(!m)return 1;
	return lucas(n/p,m/p,p)*C(n%p,m%p,p)%p;
}
int main()
{
	ios::sync_with_stdio(false);
	LL T,n,m,p;
	cin>>T;
	while(T--){
		cin>>n>>m>>p;
		init(p);
		cout<<lucas(n+m,m,p)<<endl;
	}
	return 0;
}

#include<iostream>
using namespace std;
typedef long long LL;
const LL N=1e5+2;
LL a[N];
void init(LL p)
{
	a[1]=1;
	for(int i=2;i<=p;++i)a[i]=a[i-1]*i%p;
}
void exgcd(LL a,LL b,LL &x,LL &y)
{
	if(!b){
		x=1;
		y=0;
		return;
	}
	exgcd(b,a%b,y,x);
	y-=a/b*x;
}
LL ksm(LL x,LL n,LL mod)
{
	LL ans=1;
	while(n){
		if(n&1)ans=ans*x%mod;
		n>>=1;
		x=x*x%mod;
	}
	return ans;
}
LL C(LL n,LL m,LL p)
{
	if(n==m||m==0)return 1;
	if(n<m)return 0;
	if(m*2>n)m=n-m;						  /*C(n,m)=c(n,n-m)*/
	return a[n]*ksm(a[m]*a[n-m],p-2,p)%p; /*求(a[m]*a[n-m])在(mod p)意义下的乘法逆元*/
										  /*拓展欧几里得与费马小定理均可*/ 
	/*LL x,y;
	exgcd(a[m]*a[n-m],p,x,y);
	return (a[n]*x%p+p)%p;*/ 
}
LL lucas(LL n,LL m,LL p)
{
	if(!m)return 1;
	return lucas(n/p,m/p,p)*C(n%p,m%p,p)%p;
}
int main()
{
	ios::sync_with_stdio(false);
	LL T,n,m,p;
	cin>>T;
	while(T--){
		cin>>n>>m>>p;
		init(p);
		cout<<lucas(n+m,m,p)<<endl;
	}
	return 0;
}

#include<bits/stdc++.h>
using namespace std;
typedef long long LL;
const LL N=1e5+9;
LL A[N],M[N];
LL ksm(LL x,LL n,LL mod)
{
	LL ans=1;
	while(n){
		if(n&1)ans=ans*x%mod;
		n>>=1,x=x*x%mod;
	}
	return ans;
}
void exgcd(LL a,LL b,LL &x,LL &y)
{
	if(!b)x=1,y=0;
	else exgcd(b,a%b,y,x),y-=a/b*x;
}
LL inv(LL a,LL p)
{
	LL x,y;
	exgcd(a,p,x,y);
	return (x+p)%p?x:x+p;
}
LL get(LL n,LL pi,LL p)									/*求(与pi互素后的n!)%M[i]*/ 
{
	if(!n)return 1;
	LL ans=1;
	if(n/p){											/*判断有无循环节 */ 
		for(LL i=2;i<=p;++i)if(i%pi)ans=ans*i%p;
		ans=ksm(ans,n/p,p);
	}
	for(LL i=2;i<=n%p;++i)if(i%pi)ans=ans*i%p;			/*循环节剩余部分*/ 
	return ans*get(n/pi,pi,p)%p;
}
LL exlucas(LL n,LL m,LL pi,LL p)						/*求A[i]*/ 
{
	LL nn=get(n,pi,p);									/*求(与pi互素后的n)%M[i]*/ 
	LL mm=get(m,pi,p);									/*求(m!与pi互素后的m!)%M[i]*/ 
	LL nm=get(n-m,pi,p);								/*求(与pi互素后的(n-m)!)%M[i]*/ 
	LL k=0;												/*含质因数pi的数量*/ 
	for(LL i=n;i;i/=pi)k+=i/pi;
	for(LL i=m;i;i/=pi)k-=i/pi;
	for(LL i=n-m;i;i/=pi)k-=i/pi;
	return nn*inv(mm,p)*inv(nm,p)*ksm(pi,k,p)%p;
}
LL crt(LL len,LL Lcm)
{
	LL ans=0;
	for(LL i=1;i<=len;++i){
		LL Mi=Lcm/M[i];
		ans=((ans+A[i]*inv(Mi,M[i])*Mi)%Lcm+Lcm)%Lcm;
	}
	return ans;
}
int main()
{
	ios::sync_with_stdio(false);
	LL n,m,P,num;
	while(cin>>n>>m>>P){
		if(n<m){
			cout<<0<<endl;
			continue;
		}
		num=0;
		memset(A,0,sizeof(A));
		memset(M,0,sizeof(M));
		for(LL x=P,i=2;i<=P;++i)
			if(x%i==0){
				M[++num]=1;
				while(x%i==0){
					M[num]*=i;
					x/=i;
				}
				A[num]=exlucas(n,m,i,M[num])%P;
			} 
		cout<<crt(num,P)<<endl;
	}
	return 0;
}

Miller_Rabin判断素数
#include<iostream>
#include<algorithm>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<ctime>
using namespace std;
typedef long long ll;
const int N = 1e5 + 7;
const int times = 10;
ll fast_mod(ll a,ll b,ll mod)//计算2^q的过程
{
    ll res = 0;
    while(b){
        if(b & 1) res = res + a;
        a <<= 1;
        if(a >= mod) a -= mod;
        if(res >= mod) res -= mod;
        b >>= 1;
    }
    return res;
}
ll fast_pow_mod(ll a,ll b,ll mod)//快速幂算出a^m
{
    ll res = 1;
    while(b){
        if(b & 1) res = (res * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}
bool check(ll a,ll m,ll p,ll n)//对于每次随机的a进行测试
{
    ll temp = fast_pow_mod(a,m,n),ret = temp;
    for(int i = 0;i < p;++i){
        ret = fast_mod(temp,temp,n);
        if(ret == 1 && temp != n - 1 && temp != 1) return true;
        temp = ret;
    }
    return ret != 1;
}
bool Miller_Pabin(ll n)//Miller测试的主体结构
{
    if(n < 2) return false;
    if(n == 2) return true;
    if(n & 1 == 0) return false;//对于偶数的优化
    ll p = 0,x = n - 1;//p为Miller测试的q，x为Miller测试的m
    while(x & 1 == 0){
        x >>= 1;
        p++;
    }
    srand(time(NULL));
    for(int i = 0;i < times;++i){
        ll o = rand() % (n - 1) + 1;//o就是Miller测试的底数a
        if(check(o,x,p,n)) return false;
    }
    return true;
}
 
int main()
{
    ios::sync_with_stdio(false);
    int t;
    cin >> t;
    while(t--){
        long long n;
        cin >> n;
        cout << (Miller_Pabin(n) ? "Prime" : "Not a Prime") << endl;
    }
    return 0;
}
 
中国剩余定理
void exgcd(int a,int b,int &x,int &y)
{
    if(b==0){ x=1; y=0; return;}
    exgcd(b,a%b,x,y);
    int tp=x;
    x=y; y=tp-a/b*y;
}

int china()
{
    int ans=0,lcm=1,x,y;
    for(int i=1;i<=k;++i) lcm*=b[i];
    for(int i=1;i<=k;++i)
    {
        int tp=lcm/b[i];
        exgcd(tp,b[i],x,y);
        x=(x%b[i]+b[i])%b[i];//x要为最小非负整数解
        ans=(ans+tp*x*a[i])%lcm;
    }
    return (ans+lcm)%lcm;
} 

lnt exgcd(lnt a,lnt b,lnt &x,lnt &y)
{
    if(b==0){x=1;y=0;return a;}
    lnt gcd=exgcd(b,a%b,x,y);
    lnt tp=x;
    x=y; y=tp-a/b*y;
    return gcd;
}

lnt excrt()
{
    lnt x,y,k;
    lnt M=bi[1],ans=ai[1];
    for(int i=2;i<=n;i++)
    {
        lnt a=M,b=bi[i],c=(ai[i]-ans%b+b)%b;
        lnt gcd=exgcd(a,b,x,y),bg=b/gcd;
        if(c%gcd!=0) return -1; 
        
        x=mul(x,c/gcd,bg);
        ans+=x*M;
        M*=bg;
        ans=(ans%M+M)%M;
    }
    return (ans%M+M)%M;
}

扩展欧几里得
typedef long long ll;
ll exgcd(ll a,ll b,ll &x,ll &y){
	if(!b)
	{
		x=1;
		y=0;
		return a;
	}
	int r=exgcd(b,a%b,x,y);
	int t=y;
	y=x-(a/b)*y;
	x=t;
	return r;
}
int main()
{
	//m=A%mod n与mod互质 求解(A/n)%mod
	long long m,n,mod; 
	cin>>m>>n>>mod;
	long long ans,tem;
	exgcd(n,mod,ans,tem);
	ans=(ans+mod)%mod;
	cout<<(ans*m)%mod<<endl;
}

费马小定理
int Fermat_inverse(int a,int mod)
{
    int res = 1;
    for(int i = 1;i < mod - 1;++i) res *= a;
    return res; 
}
 
//如果p为大素数，我们可以用快速幂求解，时间复杂度为：

long long fast_pow_mod(long long a,long long b,long long mod)
{
    long long res = 1;
    while(b){
        if(b & 1) res = (res * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}
long long Fermat_inverse(long long a,long long mod)
{
    return fast_pow_mod(a,mod - 2,mod); 
}  

因子和线性筛
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
#define N 500022
int prime[N],cnt;
bool vis[N];
int num[N],e[N];
void init()
{
    for(int i=2;i<=N;++i)
    {
        if(!vis[i])
        {
            prime[++cnt]=i;
            num[i]=i+1;
            e[i]=1;
        }
        for(int j=1;j<=cnt;++j)
        {
            if(prime[j]*i>N) break;
            vis[prime[j]*i]=true;
            if(i%prime[j]==0)
            {
                num[i*prime[j]]=num[i]*prime[j]+e[i];
                e[i*prime[j]]=e[i];
                break;
            }
            num[i*prime[j]]=num[i]*(prime[j]+1);
            e[i*prime[j]]=num[i];
        }
    }
} 
int main()
{
	 int T;
	 init();
    scanf("%d",&T);
    while(T--)
    {
        int n;
        scanf("%d",&n);
        printf("%lld\n",num[n]);
    } 
}

位运算求最大公约数
//位运算求解最大公约数
long long gcd(long long a,long long b)
{ 
 if(a<b)   return gcd(b,a);
 if(b==0) return a;
 if((a&1)==0&&(b&1)==0) return 2*gcd(a>>1,b>>1);//a and b are even  
 if((a&1)==0) return  gcd(a>>1,b);   // only a is  even    
 if((b&1)==0) return  gcd(a,b>>1);   // only b is  even     
 return    gcd((a+b)>>1,(a-b)>>1);   // a and b are odd
}
